var userModel = require('./userModel');
var key = '123456789trytryrtyr';
var encryptor = require('simple-encryptor')(key);


const createUserDBService = (userDetails) => {


   return new Promise((resolve, reject)=>{

       /*var userModelData = new userModel();

       userModelData.firstname = userDetails.name;
       
       userModelData.email = userDetails.email;
       userModelData.password = userDetails.password;
       userModelData.phno=userDetails.phno;
       var encrypted = encryptor.encrypt(userDetails.password);
       userModelData.password =userDetails.encrypted;
      // userModel.insertMany([userModelData]);
       userModelData.save()

       .then(()=>{
         resolve(true);
       })
       .catch(()=>{
         reject(false);
       })
*/       

       var name=userDetails.name;
  var email=userDetails.email;
  var phno=userDetails.phno;
  var password=userDetails.password;

  var data={
    "name":name,
    "email":email,
    "phno":phno,
    "password":password
  }
  userModel.insertMany([data]);
  console.log("inserted");
  return true;
   });

}

const loginuserDBService = (userDetails)=> 
{
   return new Promise((resolve, reject)=> 
   {
      userModel.findOne({ email: userDetails.email},(errorvalue, result)=>
      {
         if(errorvalue)
         {
            reject({status: false, msg: "Invaild Data"});
         }
         else
         {
            if(result !=undefined &&  result !=null)
            {
              // var decrypted = encryptor.decrypt(result.password);

               if(result.password== userDetails.password)
               {
                  resolve({status: true,msg: "User Validated Successfully"});
               }
               else
               {
                  reject({status: false,msg: "User Validated failed"});
               }
            }
            else
            {
               reject({status: false,msg: "User Error Detailssss"});
            }

         }
      
      });
      
   });
}

module.exports={
   createUserDBService,
   loginuserDBService
}